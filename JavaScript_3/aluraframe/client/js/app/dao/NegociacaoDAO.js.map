{"version":3,"sources":["../../app-es6/dao/NegociacaoDAO.js"],"names":["NegociacaoDAO","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","negociacoes","cursor","openCursor","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AAEJ,yBAAYC,UAAZ,EAAwB;AAAA;;AAEtB,SAAKC,WAAL,GAAmBD,UAAnB;AACA,SAAKE,MAAL,GAAc,aAAd;AACD;;;;6BAEQC,U,EAAY;AAAA;;AAEnB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,UAAU,MAAKN,WAAL,CACXO,WADW,CACC,CAAC,MAAKN,MAAN,CADD,EACgB,WADhB,EAEXO,WAFW,CAEC,MAAKP,MAFN,EAGXQ,GAHW,CAGPP,UAHO,CAAd;;AAKAI,gBAAQI,SAAR,GAAoB,aAAK;AACvBN,kBAAQ,EAAR;AACD,SAFD;;AAIAE,gBAAQK,OAAR,GAAkB,aAAK;AACrBC,kBAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,iBAAO,yCAAP;AACD,SAHD;AAID,OAdM,CAAP;AAeD;;;iCAEY;AAAA;;AACX,aAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIY,cAAc,EAAlB;AACA,YAAIC,SAAS,OAAKlB,WAAL,CACVO,WADU,CACE,CAAC,OAAKN,MAAN,CADF,EACiB,WADjB,EAEVO,WAFU,CAEE,OAAKP,MAFP,EAGVkB,UAHU,EAAb;;AAKED,eAAOR,SAAP,GAAmB,aAAK;AACtB,cAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;AACA,cAAID,KAAJ,EAAW;AACT,gBAAIE,OAAOF,MAAMG,KAAjB;AACAN,wBAAYO,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;AACAR,kBAAMS,QAAN,GAHS,CAGS;AACnB,WAJD,MAIO;AACLzB,oBAAQa,WAAR;AACD;AACF,SATD;;AAWAC,eAAOP,OAAP,GAAiB,aAAK;AACpBC,kBAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,iBAAO,mDAAP;AACD,SAHD;AAIH,OAtBM,CAAP;AAuBD;;;iCAGY;AAAA;;AAEX,aAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,UAAU,OAAKN,WAAL,CACXO,WADW,CACC,CAAC,OAAKN,MAAN,CADD,EACgB,WADhB,EAEXO,WAFW,CAEC,OAAKP,MAFN,EAGX6B,KAHW,EAAd;;AAKAxB,gBAAQI,SAAR,GAAoB;AAAA,iBAAKN,QAAQ,kCAAR,CAAL;AAAA,SAApB;;AAEAE,gBAAQK,OAAR,GAAkB,aAAK;AACrBC,kBAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,iBAAO,wCAAP;AACD,SAHD;AAID,OAZM,CAAP;AAaD","file":"NegociacaoDAO.js","sourcesContent":["class NegociacaoDAO {\n\n  constructor(connection) {\n\n    this._connection = connection;\n    this._store = 'negociacoes';\n  }\n\n  adiciona(negociacao) {\n\n    return new Promise((resolve, reject) => {\n      let request = this._connection\n        .transaction([this._store], 'readwrite')\n        .objectStore(this._store)\n        .add(negociacao);\n\n      request.onsuccess = e => {\n        resolve('');\n      };\n\n      request.onerror = e => {\n        console.log(e.target.error);\n        reject('Não foi possível adicionar a negociação');\n      }\n    });\n  }\n\n  listaTodos() {\n    return new Promise((resolve, reject) => {\n      let negociacoes = [];\n      let cursor = this._connection\n        .transaction([this._store], 'readwrite')\n        .objectStore(this._store)\n        .openCursor();\n\n        cursor.onsuccess = e => {\n          let atual = e.target.result;\n          if (atual) {\n            let dado = atual.value;\n            negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n            atual.continue(); // Chama novamente o onsuccess.\n          } else {\n            resolve(negociacoes)\n          }\n        };\n        \n        cursor.onerror = e => {\n          console.log(e.target.error);\n          reject('Não foi possível recuperar as negociação do banco');\n        };\n    });\n  }\n\n\n  apagaTodos() {\n\n    return new Promise((resolve, reject) => {\n      let request = this._connection\n        .transaction([this._store], 'readwrite')\n        .objectStore(this._store)\n        .clear();\n\n      request.onsuccess = e => resolve('Negociações apagadas com sucesso');\n\n      request.onerror = e => {\n        console.log(e.target.error);\n        reject('Não foi possível apagar as negociações');\n      }\n    });\n  }\n\n}"]}