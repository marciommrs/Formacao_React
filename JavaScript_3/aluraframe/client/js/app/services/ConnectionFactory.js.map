{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AACA,IAAIA,oBAAqB,YAAY;;AAEnC,MAAMC,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;;AAEA,MAAIC,aAAa,IAAjB;AACA,MAAIC,QAAQ,IAAZ;;AAEA;AAEE,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAJH;AAAA;AAAA,sCAMyB;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,sBAAYI,eAAZ,GAA8B,aAAK;AACjCd,8BAAkBe,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACD,WAFD;;AAIAR,sBAAYS,SAAZ,GAAwB,aAAK;AAC3B,gBAAI,CAACf,UAAL,EAAiB;AACfA,2BAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,sBAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,yBAAWC,KAAX,GAAmB,YAAY;AAC7B,sBAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD,eAFD;AAGD;AACDE,oBAAQJ,UAAR;AACD,WATD;;AAWAM,sBAAYW,OAAZ,GAAsB,aAAK;AACzBC,oBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,mBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,WAHD;AAID,SAvBM,CAAP;AAwBD;;AAED;;AAjCF;AAAA;AAAA,mCAkCsBrB,UAlCtB,EAkCkC;AAC9BH,eAAOyB,OAAP,CAAe,iBAAS;AACtB,cAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACEzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACFzB,qBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,SAJD;AAKD;AAxCH;AAAA;AAAA,wCA0C2B;AACvB,YAAI5B,UAAJ,EAAgB;AACdC;AACAD,uBAAa,IAAb;AACD;AACF;AA/CH;;AAAA;AAAA;AAiDD,CA1DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["\nvar ConnectionFactory = (function () {\n\n  const stores = ['negociacoes'];\n  const version = 1;\n  const dbName = 'aluraframe';\n  \n  var connection = null;\n  var close = null;\n  \n  return class ConnectionFactory {\n    \n    constructor() {\n      throw new Error('Não é possível criar instâncias de ConnectionFactory');\n    }\n  \n    static getConnection() {\n      return new Promise((resolve, reject) => {\n  \n        let openRequest = window.indexedDB.open(dbName, version);\n  \n        openRequest.onupgradeneeded = e => {\n          ConnectionFactory._createStore(e.target.result);\n        };\n  \n        openRequest.onsuccess = e => {\n          if (!connection) {\n            connection = e.target.result;\n            close = connection.close.bind(connection);\n            connection.close = function () {\n              throw new Error('Não é possível fechar diretamente a conexão');\n            }\n          }\n          resolve(connection);\n        };\n  \n        openRequest.onerror = e => {\n          console.log(e.target.error);\n          reject(e.target.error.name);\n        };\n      })\n    }\n  \n    //Varre os objectStore exclui os existentes e cria novos.\n    static _createStore(connection) {\n      stores.forEach(store => {\n        if (connection.objectStoreNames.contains(store))\n          connection.deleteObjectStore(store);\n        connection.createObjectStore(store, { autoIncrement: true });\n      });\n    }\n\n    static closeConnection() {\n      if (connection) {\n        close();\n        connection = null;\n      }\n    }\n  }\n})();\n"]}