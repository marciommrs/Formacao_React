{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","get","map","Negociacao","Date","objeto","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDAO","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","negociacaoExistente","isEquals"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n  constructor() {\n    this._http = new HttpService();\n  }\n\n  obterNegociacoes() {\n      return Promise.all([\n          this.obterNegociacoesDaSemana(), \n          this.obterNegociacoesDaSemanaAnterior(), \n          this.obterNegociacoesDaSemanaRetrasada()]\n        ).then(periodos => {\n              let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), []);\n              return negociacoes;\n        })\n        .catch(erro => {\n          throw new Error(erro);\n        });\n\n  }\n\n  obterNegociacoesDaSemana() {\n    \n    return this._http.get('negociacoes/semana')\n        .then(negociacoes => {\n          return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n        })\n        .catch(erro => {\n          console.log(erro);\n          throw new Error('Não foi possível obter as negociações da semana');\n        });\n  }\n\n  obterNegociacoesDaSemanaRetrasada() {\n    \n    return this._http.get('negociacoes/retrasada')\n        .then(negociacoes => {\n          return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n        })\n        .catch(erro => {\n          console.log(erro);\n          throw new Error('Não foi possível obter as negociações da semana retrasada');\n        });\n  }\n\n  obterNegociacoesDaSemanaAnterior() {\n\n    return this._http.get('negociacoes/anterior')\n        .then(negociacoes => {\n          return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n        })\n        .catch(erro => {\n          console.log(erro);\n          throw new Error('Não foi possível obter as negociações da semana anterior');\n        });\n  }\n\n  cadastra(negociacao) {\n      return ConnectionFactory.getConnection()\n        .then(connection => new NegociacaoDAO(connection))\n        .then(dao => dao.adiciona(negociacao))\n        .then(() => 'Negociação adicionada com sucesso')\n        .catch(erro => {\n          console.log(erro);\n          throw new Error('Não foi possível adicionar a negociação');\n        });\n  }\n\n  lista() {\n      return ConnectionFactory.getConnection()\n        .then(connection => new NegociacaoDAO(connection))\n        .then(dao => dao.listaTodos())\n        .catch(erro => {\n          console.log(erro);\n          throw new Error('Não foi possível listar as negociações');\n        });\n  }\n\n  apaga() {\n      return ConnectionFactory.getConnection()\n        .then(connection => new NegociacaoDAO(connection))\n        .then(dao => dao.apagaTodos())\n        .then(() => 'Negociações apagadas com sucesso')\n        .catch(erro => {\n          console.log(erro);\n          throw new Error('Não foi possível apagar as negociações');\n        });\n  }\n\n  importa(listaAtual) {\n      return this.obterNegociacoes()\n        .then(negociacoes =>\n          negociacoes.filter(negociacao =>\n            !listaAtual.some(negociacaoExistente =>\n              negociacaoExistente.  isEquals(negociacao))))\n        .catch(erro => {\n          console.log(erro);\n          throw new Error('Não foi possível importar as negociações');\n        });\n  }\n\n}"]}